name: Release Pipeline

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v5
      with:
        configuration: ".github/changelog-config.json"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: win32
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: x64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    # Build frontend desktop app
    - name: Build Electron app
      run: |
        cd frontend
        npm ci
        npm run build
        npm run electron:build
    
    - name: Upload desktop app
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./frontend/dist/educational-rpg-${{ matrix.platform }}-${{ matrix.arch }}.zip
        asset_name: educational-rpg-${{ matrix.platform }}-${{ matrix.arch }}.zip
        asset_content_type: application/zip

  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Build and push backend
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/educational-rpg-backend:${{ needs.create-release.outputs.version }}
          ${{ secrets.DOCKER_USERNAME }}/educational-rpg-backend:latest
          ghcr.io/${{ github.repository }}/backend:${{ needs.create-release.outputs.version }}
          ghcr.io/${{ github.repository }}/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Build and push frontend
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/educational-rpg-frontend:${{ needs.create-release.outputs.version }}
          ${{ secrets.DOCKER_USERNAME }}/educational-rpg-frontend:latest
          ghcr.io/${{ github.repository }}/frontend:${{ needs.create-release.outputs.version }}
          ghcr.io/${{ github.repository }}/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  publish-helm:
    name: Publish Helm Charts
    runs-on: ubuntu-latest
    needs: [create-release, publish-docker]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.13.0'
    
    - name: Package Helm charts
      run: |
        cd charts
        helm package educational-rpg
    
    - name: Push to ChartMuseum
      run: |
        curl --data-binary "@educational-rpg-${{ needs.create-release.outputs.version }}.tgz" \
          ${{ secrets.CHARTMUSEUM_URL }}/api/charts
    
    - name: Update Helm repository index
      run: |
        helm repo index . --url ${{ secrets.HELM_REPO_URL }}
        
  deploy-demo:
    name: Deploy Demo Environment
    runs-on: ubuntu-latest
    needs: [create-release, publish-docker]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes
      uses: azure/k8s-deploy@v4
      with:
        namespace: demo
        manifests: |
          k8s/demo/deployment.yaml
          k8s/demo/service.yaml
          k8s/demo/ingress.yaml
        images: |
          ${{ secrets.DOCKER_USERNAME }}/educational-rpg-backend:${{ needs.create-release.outputs.version }}
          ${{ secrets.DOCKER_USERNAME }}/educational-rpg-frontend:${{ needs.create-release.outputs.version }}

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
    
    - name: Build documentation
      run: |
        mkdocs build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts, publish-docker, publish-helm, deploy-demo]
    if: always()
    
    steps:
    - name: Send release notification
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "ðŸš€ New Release Published!",
            attachments: [{
              color: 'good',
              fields: [
                {
                  title: 'Version',
                  value: '${{ needs.create-release.outputs.version }}',
                  short: true
                },
                {
                  title: 'Status',
                  value: '${{ job.status }}',
                  short: true
                },
                {
                  title: 'Release URL',
                  value: 'https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}'
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}