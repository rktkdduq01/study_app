name: CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  AWS_REGION: 'us-west-2'
  ECR_REPOSITORY_BACKEND: 'educational-rpg/backend'
  ECR_REPOSITORY_FRONTEND: 'educational-rpg/frontend'
  ECS_SERVICE_BACKEND: 'educational-rpg-backend'
  ECS_SERVICE_FRONTEND: 'educational-rpg-frontend'
  ECS_CLUSTER: 'educational-rpg-cluster'
  ECS_TASK_DEFINITION_BACKEND: '.aws/task-definition-backend.json'
  ECS_TASK_DEFINITION_FRONTEND: '.aws/task-definition-frontend.json'

jobs:
  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Build and push backend
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:staging
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          ENVIRONMENT=staging
    
    # Build and push frontend
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:staging
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_API_URL=${{ secrets.STAGING_API_URL }}
          VITE_WEBSOCKET_URL=${{ secrets.STAGING_WEBSOCKET_URL }}
    
    # Run database migrations
    - name: Run database migrations
      run: |
        docker run --rm \
          -e DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }} \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:staging \
          alembic upgrade head
    
    # Deploy backend to ECS
    - name: Fill in the new backend image ID in the Amazon ECS task definition
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_BACKEND }}
        container-name: backend
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:staging
        environment-variables: |
          ENVIRONMENT=staging
          DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
          SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}
          JWT_SECRET_KEY=${{ secrets.STAGING_JWT_SECRET_KEY }}
          ENCRYPTION_KEY=${{ secrets.STAGING_ENCRYPTION_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
    
    - name: Deploy backend to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}-staging
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    
    # Deploy frontend to ECS
    - name: Fill in the new frontend image ID in the Amazon ECS task definition
      id: task-def-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_FRONTEND }}
        container-name: frontend
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:staging
    
    - name: Deploy frontend to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONTEND }}-staging
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    
    # Run smoke tests
    - name: Run smoke tests
      run: |
        cd e2e
        npm ci
        npx playwright install --with-deps
        PLAYWRIGHT_BASE_URL=${{ secrets.STAGING_URL }} npm run test:smoke

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    # Tag staging images as production
    - name: Tag staging images as production
      run: |
        # Backend
        docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:staging
        docker tag ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:staging \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:production
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:production
        
        # Frontend
        docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:staging
        docker tag ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:staging \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:production
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:production
    
    # Create database backup
    - name: Create database backup
      run: |
        docker run --rm \
          -e DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }} \
          -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          -e S3_BUCKET=${{ secrets.BACKUP_S3_BUCKET }} \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:production \
          python scripts/backup_database.py
    
    # Run database migrations
    - name: Run database migrations
      run: |
        docker run --rm \
          -e DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }} \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:production \
          alembic upgrade head
    
    # Deploy backend to production (Blue/Green)
    - name: Deploy backend to production
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE_BACKEND }}-production \
          --force-new-deployment \
          --deployment-configuration "maximumPercent=200,minimumHealthyPercent=100,deploymentCircuitBreaker={enable=true,rollback=true}"
    
    # Deploy frontend to production (Blue/Green)
    - name: Deploy frontend to production
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE_FRONTEND }}-production \
          --force-new-deployment \
          --deployment-configuration "maximumPercent=200,minimumHealthyPercent=100,deploymentCircuitBreaker={enable=true,rollback=true}"
    
    # Invalidate CloudFront cache
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
    
    # Run production tests
    - name: Run production smoke tests
      run: |
        cd e2e
        npm ci
        npx playwright install --with-deps
        PLAYWRIGHT_BASE_URL=${{ secrets.PRODUCTION_URL }} npm run test:smoke
    
    # Send deployment notification
    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Production deployment ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Message: ${{ github.event.head_commit.message }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Rollback on failure
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Rollback ECS services
      run: |
        # Get previous task definition
        PREVIOUS_TASK_DEF=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE_BACKEND }}-production \
          --query 'services[0].deployments[1].taskDefinition' \
          --output text)
        
        # Rollback backend
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE_BACKEND }}-production \
          --task-definition $PREVIOUS_TASK_DEF
        
        # Rollback frontend
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE_FRONTEND }}-production \
          --task-definition $PREVIOUS_TASK_DEF
    
    - name: Send rollback notification
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "⚠️ Production deployment failed and was rolled back",
            attachments: [{
              color: 'danger',
              text: 'Commit: ${{ github.sha }}\nAuthor: ${{ github.actor }}'
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}